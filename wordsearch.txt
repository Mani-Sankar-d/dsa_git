Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

int strlen(string s){
    int count=0;
    while(s[count]!='\0'){
        count++;
    }
    return count;
}
int search_for_next_char(vector<vector<char>>& board, string word,int i,int j,int next_index,int father,int mother, vector<vector<int>> &vec){
    if(vec[i][j]==1)
        return 0;

    vec[i][j]=1;
    if(next_index==strlen(word)) return 1;
    if((i-1 >=0 && (i-1!=father)) && board[i-1][j]==word[next_index]){
        if(search_for_next_char(board,word,i-1,j,next_index+1,i,j,vec)==1) return 1;
    }
    if((j+1 <board[0].size() && (j+1!=mother)) && board[i][j+1]==word[next_index]){
         if(search_for_next_char(board,word,i,j+1,next_index+1,i,j,vec)==1) return 1;
    }
    if((i+1 <board.size() && (i+1!=father)) && board[i+1][j]==word[next_index]){

         if(search_for_next_char(board,word,i+1,j,next_index+1,i,j,vec)==1) return 1;
    }
    if((j-1 >=0 && (j-1!=mother)) && board[i][j-1]==word[next_index]){
         if(search_for_next_char(board,word,i,j-1,next_index+1,i,j,vec)==1) return 1;
    }
    vec[i][j]=0;
    return 0;
}


class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int flag=0;
        vector<vector<int>>vec(board.size(), std::vector<int>(board[0].size(), 0));
         for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                vec[i][j]=0;
            }
        }
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]==word[0]){
                   if(search_for_next_char(board,word,i,j,1,-1,-1,vec)==1){
                        flag=1;
                   }
                }
            }
        }
        if(flag==1) return true;
        if(flag==0) return false;
        return false;
    }
};