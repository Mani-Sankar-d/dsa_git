There is a circle of red and blue tiles. You are given an array of integers colors and an integer k. The color of tile i is represented by colors[i]:

colors[i] == 0 means that tile i is red.
colors[i] == 1 means that tile i is blue.
An alternating group is every k contiguous tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its left and right tiles).

Return the number of alternating groups.

Note that since colors represents a circle, the first and the last tiles are considered to be next to each other






int numberOfAlternatingGroups(vector<int>& colors, int k) {
        int i=k-1,j;
        int count=0;
        int last_odd=-1;
        for(int p=1;p<k;p++){
            if(colors[p]==colors[p-1])
                last_odd=p-1;
        }
        do{

            if(last_odd==-1){
                count++;    
            }
            else if((i-last_odd+colors.size())%colors.size()>=k || last_odd==i){
                count++;    
            }
            
            i=(i+1)%colors.size();
            if(colors[i]==colors[(i-1+colors.size())%colors.size()]) last_odd=(i-1+colors.size())%colors.size();
        }while(i!=k-1);
        return count;
    }
}